DENSE GEMM 
------------


1. Inner product: A-row by B-col: IJK or JIK loop 
=================================================

IJK -> C row wise, for a row-panel of C we need to read A-rowpanel and full B
JIK -> C col wise, for a col-panel of C we need to read full A and  B-colpanel
A access = N^3
B access = N^3
C access = N^2 read and write when optimized 

for (i=0; i < M; i++)
{
   for (j=0; j < N; j++)
   {
      for (k=0; k < K; k++)
      {
         C[i,j] += A[i,k] * B[k, j];  
      }
   }
}

==> optimizing C read and write 

for (i=0; i < M; i++)
{
   for (j=0; j < N; j++)
   {
      c0 = C[i,j]              // reducing C access to M*N
      for (k=0; k < K; k++)
      {
         c0 += A[i,k] * B[k, j]     /* DOT product */
      }
      C[i,j] = c0;
   }
}




2. A-col by B-col: JKI 
======================

A access = N^3
B access = N^2 when optimized 
C access = N^3 read and write 

for (j=0; j < N; j++)
{
   for (k=0; k < K; k++)
   {
      for (i=0; i < M; i++)
      {
         C[i,j] += A[i,k] * B[k, j];  
      }
   }
}
==> optimizing B access: 

for (j=0; j < N; j++)
{
   for (k=0; k < K; k++)
   {
      b0 = B[k, j]    // reducing B acces to N*K  
/*
 *    multiplying A-col panel with B[k,j] and update C-col panel each time
 *    
 */
      for (i=0; i < M; i++)
      {
         C[i,j] += A[i,k] * b0;  /* AXPY: Cj = Ak * b + Cj */ 
      }
   }
}

3. A-row by B-row: IKJ
==========================

A access = N^2 when optimized
B access = N^3
C access = N^3 read and write  

for (i=0; i < M; i++)
{
   for (k=0; k < K; k++)
   {
      for (j=0; j < N; j++)
      {
         C[i,j] += A[i,k] * B[k, j];  
      }
   }
}
==> optimizing A access 

for (i=0; i < M; i++)
{
   for (k=0; k < K; k++)
   {
      a0 = A[i,k]
/*
 *    Multiplying B row panel by A[i,k] and update C-row panel  
 */
      for (j=0; j < N; j++)
      {
         C[i,j] += a0 * B[k, j];  
      }
   }
}

4. Rank1 outer-product: 
============================================
A-col by B-row produc full C each time: 

KIJ: multiplying each element of A of col-panel with B-rowpanel  

A access = N^2 
B access = N^3
C access = N^3 read and write  

for (k=0; k < K; k++)
{
   for (i=0; i < M; i++)
   {
      a0 = A[i,k]
      for (j=0; j < N; j++)
      {
         C[i,j] += a0 * B[k, j];  
      }
   }
}

A-col by B-row: KJI  

KJI: multiplying each element of A of row-panel with B-colpanel  

A access = N^3 
B access = N^2
C access = N^3 read and write  

for (k=0; k < K; k++)
{
   for (j=0; j < N; j++)
   {
      b0 = B[k, j]
      for (i=0; i < M; i++)
      {
         C[i,j] += A[i,k] * b0;  
      }
   }
}


SDMM: Sparse-Dense matrix matrix multiplication:
**************************************************

A sparse: 
CSR: IA = rowptr(M+1), AJ = colid(NNZ), A -> NNZ 

C is mostly dense (if each row of A has atleast one element)


IJK: 
====

for (i=0; i < M; i++)
{
   s0 = A_rowptr[i];  
   s1 = A_rowptr[i+1]-1;  
   
   for (j=0; j < N; j++)
   {
      c0 = C[i,j]  /* can be init with 0 when C = AB */

      // only for nonzero element in a row of A 
      for (k=s0; k < s1; k++)
      {
         Bk = B[A_colid[k], j];  // indirect acess in B-colpanel   
         c0 += A[k] * Bk;  
      }
      C[i,j] = c0
   }
}

NOTE: 
1. C access is optimized = M*N (N^2) write 
2. Indirect access in each B col-panel... 
   - B access N * NNZ 
3. multiple access of Ak for N times... doesn't make sense!!!
   - IA access M+1, 
   - JA access N * NNZ 
   - A access NNZ * N  

JIK: similar... but we access the whole A with one panel of B  
====

for (j=0; j < N; j++)
{
   for (i=0; i < M; i++)
   {
      s0 = A_rowptr[i];  
      s1 = A_rowptr[i+1]i-1;  
      
      c0 = C[i,j]  /* can be init with 0 when C = AB */
      
      for (k=s0; k < s1; k++)
      {
         Bk = B[A_colid[k], j];  // indirect acess in B-colpanel   
         c0 += A[k] * Bk;  
      }
      C[i,j] = c0
   }
}

C optimized but indirect access of B 

==> using COO but C not optimized : 

for (j=0; j < N; j++)
{
   for (i=0; i < NNZ; i++)
   {
      ia = A_row[i]; 
      ja = A_col[i]; 
      C[ia, j] += A[i] * B[ja, j]
   }
}  


IKJ: 
==== 

for (i=0; i < M; i++)
{
   s0 = A_rowptr[i];  
   s1 = A_rowptr[i+1]i-1;  
   
   for (k=s0; k < s1; k++)
   {
      a0 = A[k]
      JA = A_colid[k]

      for (j=0; j < N; j++)
      {
         C[i,j] += a0 * B[JA, j];  
      }
   }
}

A acess = NNZ 
   A_rowptr = M+1
   A-Colid = NNZ  
C access = N*NNZ 
B access = N*NNZ


===> using COO representation 

for (i=0; i < NNZ; i++)
{
   ia = A_row[i]; 
   ja = A_col[i]; 
   a0 = A[i]; 
   for (j=0; j < N; j++)
   {
      C[ia, j] += a0 * B[ja, j]
   }
}  

NOTE: 
1. A access optimized
2. Both C and B have indirect access: C partial column and B partial row   
3. If C is colmajor, we are not using full cache line. 
   If C is row-major, it would be much worse, will have TLB problem as well  
      -- copy it to make it contigous 

A access = NNZ  
IA access = NNZ
JA access = NNZ 

C access NNZ * N  read and write => irregular access 
B access NNZ * N read 


Outer product: 
KIJ : 
======

CSC: 

for (k=0; k < K; k++)
{
   cl0 = A_colptr[k]; 
   cl1 = A_colptr[k+1]-1; 

   for (i=cl0; i < cl1; i++)
   {
      a0 = A[i]
      IA = A_rowid[i]
      for (j=0; j < N; j++)
      {
         C[IA,j] += a0 * B[k, j];  
      }
   }
}







